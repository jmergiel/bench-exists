Benchmark with 10000000 elements (data per loop = 76.294MB) and 1000 loops
Searching through 0.073TB of data per test with vector cutoff limit = 700GB

Searching for non-existent element in vector:
[ vector, indexed by size_t, using size()] 18458097300(ns) 18458098.000000(ns/loop)
[vector, indexed by size_t, cached size()] 18404616700(ns) 18404616.000000(ns/loop)
[         vector, iterated, calling end()] 18393891300(ns) 18393890.000000(ns/loop)
[          vector, iterated, cached end()] 18452360400(ns) 18452362.000000(ns/loop)
[    vector, sorted, std::binary_search()] 51800(ns) 51.799999(ns/loop)

Searching for non-existent element in set:
[                      set, using count()] 156500(ns) 156.500000(ns/loop)
[                       set, using find()] 150300(ns) 150.300003(ns/loop)

Searching for non-existent element in unordered_set:
[            unordered_set, using count()] 9000(ns) 9.000000(ns/loop)
[             unordered_set, using find()] 4900(ns) 4.900000(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 1.837x
[    vector, sorted, std::binary_search()] 10.571x
[                       set, using find()] 30.673x
[                      set, using count()] 31.939x
[         vector, iterated, calling end()] 3753855.250x
[vector, indexed by size_t, cached size()] 3756044.250x
[          vector, iterated, cached end()] 3765787.750x
[ vector, indexed by size_t, using size()] 3766958.750x

Searching for middle element in vector:
[ vector, indexed by size_t, using size()] 9310458400(ns) 9310459.000000(ns/loop)
[vector, indexed by size_t, cached size()] 9212933300(ns) 9212933.000000(ns/loop)
[         vector, iterated, calling end()] 9211083000(ns) 9211083.000000(ns/loop)
[          vector, iterated, cached end()] 9169528200(ns) 9169528.000000(ns/loop)
[    vector, sorted, std::binary_search()] 89100(ns) 89.099998(ns/loop)

Searching for middle element in set:
[                      set, using count()] 220500(ns) 220.500000(ns/loop)
[                       set, using find()] 216000(ns) 216.000000(ns/loop)

Searching for middle element in unordered_set:
[            unordered_set, using count()] 20100(ns) 20.100000(ns/loop)
[             unordered_set, using find()] 4900(ns) 4.900000(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 4.102x
[    vector, sorted, std::binary_search()] 18.184x
[                       set, using find()] 44.082x
[                      set, using count()] 45.000x
[          vector, iterated, cached end()] 1871332.250x
[         vector, iterated, calling end()] 1879812.875x
[vector, indexed by size_t, cached size()] 1880190.500x
[ vector, indexed by size_t, using size()] 1900093.500x
