Benchmark with 1000 elements (data per loop = 0.008MB) and 10000000 loops
Searching through 0.073TB of data per test with vector cutoff limit = 700GB

Searching for non-existent element in vector:
[ vector, indexed by size_t, using size()] 7969274500(ns) 796.927429(ns/loop)
[vector, indexed by size_t, cached size()] 7940468400(ns) 794.046814(ns/loop)
[         vector, iterated, calling end()] 7927127700(ns) 792.712769(ns/loop)
[          vector, iterated, cached end()] 7923560900(ns) 792.356079(ns/loop)
[    vector, sorted, std::binary_search()] 194099500(ns) 19.409950(ns/loop)

Searching for non-existent element in set:
[                      set, using count()] 130656000(ns) 13.065600(ns/loop)
[                       set, using find()] 133786900(ns) 13.378690(ns/loop)

Searching for non-existent element in unordered_set:
[            unordered_set, using count()] 7471700(ns) 0.747170(ns/loop)
[             unordered_set, using find()] 7429900(ns) 0.742990(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 1.006x
[                      set, using count()] 17.585x
[                       set, using find()] 18.007x
[    vector, sorted, std::binary_search()] 26.124x
[          vector, iterated, cached end()] 1066.443x
[         vector, iterated, calling end()] 1066.922x
[vector, indexed by size_t, cached size()] 1068.718x
[ vector, indexed by size_t, using size()] 1072.595x

Searching for middle element in vector:
[ vector, indexed by size_t, using size()] 4080684100(ns) 408.068390(ns/loop)
[vector, indexed by size_t, cached size()] 4055248000(ns) 405.524780(ns/loop)
[         vector, iterated, calling end()] 4040456300(ns) 404.045624(ns/loop)
[          vector, iterated, cached end()] 4027766400(ns) 402.776642(ns/loop)
[    vector, sorted, std::binary_search()] 421897900(ns) 42.189789(ns/loop)

Searching for middle element in set:
[                      set, using count()] 301848500(ns) 30.184851(ns/loop)
[                       set, using find()] 309077400(ns) 30.907742(ns/loop)

Searching for middle element in unordered_set:
[            unordered_set, using count()] 114841100(ns) 11.484111(ns/loop)
[             unordered_set, using find()] 12121200(ns) 1.212120(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 9.474x
[                      set, using count()] 24.903x
[                       set, using find()] 25.499x
[    vector, sorted, std::binary_search()] 34.807x
[          vector, iterated, cached end()] 332.291x
[         vector, iterated, calling end()] 333.338x
[vector, indexed by size_t, cached size()] 334.558x
[ vector, indexed by size_t, using size()] 336.657x
