Benchmark with 10000000 elements (data per loop = 76.294MB) and 10000000 loops
Searching through 727.596TB of data per test with vector cutoff limit = 700GB
Vector cutoff limit reached - skipping linear vector benchmarks

Searching for non-existent element in vector:
[    vector, sorted, std::binary_search()] 448041600(ns) 44.804161(ns/loop)

Searching for non-existent element in set:
[                      set, using count()] 1433094900(ns) 143.309494(ns/loop)
[                       set, using find()] 1425253600(ns) 142.525360(ns/loop)

Searching for non-existent element in unordered_set:
[            unordered_set, using count()] 8047800(ns) 0.804780(ns/loop)
[             unordered_set, using find()] 8211700(ns) 0.821170(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[            unordered_set, using count()] 1.000x
[             unordered_set, using find()] 1.020x
[    vector, sorted, std::binary_search()] 55.673x
[                       set, using find()] 177.099x
[                      set, using count()] 178.073x

Searching for middle element in vector:
[    vector, sorted, std::binary_search()] 815181400(ns) 81.518135(ns/loop)

Searching for middle element in set:
[                      set, using count()] 2286415100(ns) 228.641510(ns/loop)
[                       set, using find()] 2278868900(ns) 227.886902(ns/loop)

Searching for middle element in unordered_set:
[            unordered_set, using count()] 115464900(ns) 11.546490(ns/loop)
[             unordered_set, using find()] 12049800(ns) 1.204980(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 9.582x
[    vector, sorted, std::binary_search()] 67.651x
[                       set, using find()] 189.121x
[                      set, using count()] 189.747x
