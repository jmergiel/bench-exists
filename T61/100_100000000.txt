Benchmark with 100 elements (data per loop = 0.001MB) and 100000000 loops
Searching through 0.073TB of data per test with vector cutoff limit = 700GB

Searching for non-existent element in vector:
[ vector, indexed by size_t, using size()] 9095936400(ns) 90.959358(ns/loop)
[vector, indexed by size_t, cached size()] 9028616800(ns) 90.286171(ns/loop)
[         vector, iterated, calling end()] 9054006200(ns) 90.540062(ns/loop)
[          vector, iterated, cached end()] 9102526500(ns) 91.025261(ns/loop)
[    vector, sorted, std::binary_search()] 1256060900(ns) 12.560609(ns/loop)

Searching for non-existent element in set:
[                      set, using count()] 875955500(ns) 8.759555(ns/loop)
[                       set, using find()] 868534800(ns) 8.685348(ns/loop)

Searching for non-existent element in unordered_set:
[            unordered_set, using count()] 74528400(ns) 0.745284(ns/loop)
[             unordered_set, using find()] 74636700(ns) 0.746367(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[            unordered_set, using count()] 1.000x
[             unordered_set, using find()] 1.001x
[                       set, using find()] 11.654x
[                      set, using count()] 11.753x
[    vector, sorted, std::binary_search()] 16.853x
[vector, indexed by size_t, cached size()] 121.143x
[         vector, iterated, calling end()] 121.484x
[ vector, indexed by size_t, using size()] 122.047x
[          vector, iterated, cached end()] 122.135x

Searching for middle element in vector:
[ vector, indexed by size_t, using size()] 6011237200(ns) 60.112373(ns/loop)
[vector, indexed by size_t, cached size()] 6072468000(ns) 60.724678(ns/loop)
[         vector, iterated, calling end()] 6163291600(ns) 61.632915(ns/loop)
[          vector, iterated, cached end()] 6046523000(ns) 60.465229(ns/loop)
[    vector, sorted, std::binary_search()] 3073848800(ns) 30.738489(ns/loop)

Searching for middle element in set:
[                      set, using count()] 987840500(ns) 9.878406(ns/loop)
[                       set, using find()] 986402200(ns) 9.864021(ns/loop)

Searching for middle element in unordered_set:
[            unordered_set, using count()] 1097575100(ns) 10.975750(ns/loop)
[             unordered_set, using find()] 114957800(ns) 1.149578(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[                       set, using find()] 8.581x
[                      set, using count()] 8.593x
[            unordered_set, using count()] 9.548x
[    vector, sorted, std::binary_search()] 26.739x
[ vector, indexed by size_t, using size()] 52.291x
[          vector, iterated, cached end()] 52.598x
[vector, indexed by size_t, cached size()] 52.823x
[         vector, iterated, calling end()] 53.614x
