Benchmark with 1000000 elements (data size per test = 7.629MB) and 10000 loops

Searching for non-existent element in vector:
[ vector, indexed by size_t, using size()] 16975507500(ns) 1697550.750000(ns/loop)
[vector, indexed by size_t, cached size()] 16933712400(ns) 1693371.250000(ns/loop)
[         vector, iterated, calling end()] 16922502700(ns) 1692250.375000(ns/loop)
[          vector, iterated, cached end()] 16889857300(ns) 1688985.750000(ns/loop)

Searching for non-existent element in set:
[                      set, using count()] 1258200(ns) 125.820000(ns/loop)
[                       set, using find()] 1076300(ns) 107.629997(ns/loop)

Searching for non-existent element in unordered_set:
[            unordered_set, using count()] 16800(ns) 1.680000(ns/loop)
[             unordered_set, using find()] 11500(ns) 1.150000(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 1.461x
[                       set, using find()] 93.591x
[                      set, using count()] 109.409x
[          vector, iterated, cached end()] 1468683.250x
[         vector, iterated, calling end()] 1471522.000x
[vector, indexed by size_t, cached size()] 1472496.750x
[ vector, indexed by size_t, using size()] 1476131.125x

Searching for middle element in vector:
[ vector, indexed by size_t, using size()] 4137139300(ns) 413713.906250(ns/loop)
[vector, indexed by size_t, cached size()] 4075739400(ns) 407573.937500(ns/loop)
[         vector, iterated, calling end()] 4265773800(ns) 426577.375000(ns/loop)
[          vector, iterated, cached end()] 4273029100(ns) 427302.906250(ns/loop)

Searching for middle element in set:
[                      set, using count()] 1525500(ns) 152.550003(ns/loop)
[                       set, using find()] 1522600(ns) 152.259995(ns/loop)

Searching for middle element in unordered_set:
[            unordered_set, using count()] 122800(ns) 12.280000(ns/loop)
[             unordered_set, using find()] 15600(ns) 1.560000(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 7.872x
[                       set, using find()] 97.603x
[                      set, using count()] 97.788x
[vector, indexed by size_t, cached size()] 261265.344x
[ vector, indexed by size_t, using size()] 265201.250x
[         vector, iterated, calling end()] 273447.031x
[          vector, iterated, cached end()] 273912.125x
