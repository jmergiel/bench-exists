Benchmark with 10000 elements (data per loop = 0.076MB) and 1000000 loops
Searching through 0.073TB of data per test with vector cutoff limit = 700GB

Searching for non-existent element in vector:
[ vector, indexed by size_t, using size()] 8061918900(ns) 8061.918945(ns/loop)
[vector, indexed by size_t, cached size()] 8079446500(ns) 8079.446289(ns/loop)
[         vector, iterated, calling end()] 8477398800(ns) 8477.399414(ns/loop)
[          vector, iterated, cached end()] 8462121100(ns) 8462.121094(ns/loop)
[    vector, sorted, std::binary_search()] 26546800(ns) 26.546801(ns/loop)

Searching for non-existent element in set:
[                      set, using count()] 18468300(ns) 18.468300(ns/loop)
[                       set, using find()] 17526700(ns) 17.526699(ns/loop)

Searching for non-existent element in unordered_set:
[            unordered_set, using count()] 746500(ns) 0.746500(ns/loop)
[             unordered_set, using find()] 746500(ns) 0.746500(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[            unordered_set, using count()] 1.000x
[             unordered_set, using find()] 1.000x
[                       set, using find()] 23.479x
[                      set, using count()] 24.740x
[    vector, sorted, std::binary_search()] 35.562x
[ vector, indexed by size_t, using size()] 10799.623x
[vector, indexed by size_t, cached size()] 10823.104x
[          vector, iterated, cached end()] 11335.729x
[         vector, iterated, calling end()] 11356.194x

Searching for middle element in vector:
[ vector, indexed by size_t, using size()] 4030959500(ns) 4030.959717(ns/loop)
[vector, indexed by size_t, cached size()] 4024300300(ns) 4024.300293(ns/loop)
[         vector, iterated, calling end()] 4255465400(ns) 4255.465332(ns/loop)
[          vector, iterated, cached end()] 4238694300(ns) 4238.694336(ns/loop)
[    vector, sorted, std::binary_search()] 46379300(ns) 46.379299(ns/loop)

Searching for middle element in set:
[                      set, using count()] 53696100(ns) 53.696098(ns/loop)
[                       set, using find()] 53969300(ns) 53.969299(ns/loop)

Searching for middle element in unordered_set:
[            unordered_set, using count()] 10771500(ns) 10.771500(ns/loop)
[             unordered_set, using find()] 1159600(ns) 1.159600(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[            unordered_set, using count()] 9.289x
[    vector, sorted, std::binary_search()] 39.996x
[                      set, using count()] 46.306x
[                       set, using find()] 46.541x
[vector, indexed by size_t, cached size()] 3470.421x
[ vector, indexed by size_t, using size()] 3476.164x
[          vector, iterated, cached end()] 3655.307x
[         vector, iterated, calling end()] 3669.770x
