Benchmark with 10 elements (data per loop = 0.000MB) and 1000000000 loops
Searching through 0.073TB of data per test with vector cutoff limit = 700GB

Searching for non-existent element in vector:
[ vector, indexed by size_t, using size()] 12156943800(ns) 12.156943(ns/loop)
[vector, indexed by size_t, cached size()] 12168262300(ns) 12.168262(ns/loop)
[         vector, iterated, calling end()] 12106875500(ns) 12.106876(ns/loop)
[          vector, iterated, cached end()] 12143589400(ns) 12.143589(ns/loop)
[    vector, sorted, std::binary_search()] 7238770600(ns) 7.238770(ns/loop)

Searching for non-existent element in set:
[                      set, using count()] 5100860600(ns) 5.100861(ns/loop)
[                       set, using find()] 5083535100(ns) 5.083535(ns/loop)

Searching for non-existent element in unordered_set:
[            unordered_set, using count()] 779184000(ns) 0.779184(ns/loop)
[             unordered_set, using find()] 813812300(ns) 0.813812(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[            unordered_set, using count()] 1.000x
[             unordered_set, using find()] 1.044x
[                       set, using find()] 6.524x
[                      set, using count()] 6.546x
[    vector, sorted, std::binary_search()] 9.290x
[         vector, iterated, calling end()] 15.538x
[          vector, iterated, cached end()] 15.585x
[ vector, indexed by size_t, using size()] 15.602x
[vector, indexed by size_t, cached size()] 15.617x

Searching for middle element in vector:
[ vector, indexed by size_t, using size()] 7468499700(ns) 7.468500(ns/loop)
[vector, indexed by size_t, cached size()] 7444332000(ns) 7.444332(ns/loop)
[         vector, iterated, calling end()] 7433661000(ns) 7.433661(ns/loop)
[          vector, iterated, cached end()] 7470353200(ns) 7.470354(ns/loop)
[    vector, sorted, std::binary_search()] 10172660500(ns) 10.172661(ns/loop)

Searching for middle element in set:
[                      set, using count()] 5089611900(ns) 5.089612(ns/loop)
[                       set, using find()] 5091120300(ns) 5.091120(ns/loop)

Searching for middle element in unordered_set:
[            unordered_set, using count()] 11138608600(ns) 11.138608(ns/loop)
[             unordered_set, using find()] 1155094200(ns) 1.155094(ns/loop)

Relative comparison (= slower than the fastest by this ratio):
[             unordered_set, using find()] 1.000x
[                      set, using count()] 4.406x
[                       set, using find()] 4.408x
[         vector, iterated, calling end()] 6.436x
[vector, indexed by size_t, cached size()] 6.445x
[ vector, indexed by size_t, using size()] 6.466x
[          vector, iterated, cached end()] 6.467x
[    vector, sorted, std::binary_search()] 8.807x
[            unordered_set, using count()] 9.643x
